Core moules ( includes those not requiriing require keword, Global modules)
NPM (Third party modules)
Custom modules

NPM means you can download modules, you can upload modules and also NPM is also a website. When NodeJS is insalled, NPM is also installed.

Most calls are async in nodejs.
Ways of running nodejs
	(a) node A.js  --- > Package.json is not used
	(b) npm run A.js
	(c) nodemon A.js
Node JS core APIs
=======================
https://nodejs.org/dist/latest-v6.x/docs/api/console.html
Note:-- The above is for 6.X series

Node JS third party APIs
=======================
You can search for the package in https://www.npmjs.com/. Search for that in the textbox 'find packages'.
Once you install it, go to the node_modules/<module_name>/README.md file. 
That file api-doc/documentation API links
TODO:-- May be there is a single site where all the 3rd party module APIs are hosted 



GIT (1st time)
========================
git init
git add -A
git commit -am "comment"  // This commits all added and modified files
git config --global user.name "sujithbabu1971" // May be there is a better way to force username
git config --global user.email "sujithkp@yahoo.com" // May be there is a better way to force username
git remote add ExpressJSSamples https://github.com/sujithbabu1971/ExpressJSSamples.git
git push -u  ExpressJSSamples // -u sets the files for pull also. This is important

GIT . Committing a modified file after the 1st time.
========================
git add filename
git commit -m "message" filename
git push 
Note:-- Only adding the file and committing worked for me. May be, there is a better way such as just commit. (Note:-- Later found that if we use -u in git push the 1st time, this step is not needed).



Install express
express-handlebars
express-session
body-parser


With -g (global installation), the --save option that saves into the package.json file does not seem to be working


For express-generator
=====================
First install express-generator globally. We do not need this as a dependancy to the project for obvious reasons.
Then "express myapp". This will create myapp with all the required directory structire. jade is the default template
"express --ejs myapp"  --> The template engine become ejs
"express --hbs myapp"  --> The template engine become handlebars
Fiddle around with these options to understand all that are available. 
Then cd to myapp directory
npm install ---> this will install all dependancies
npm start --> default start command in package.json. This has the start scripts in the ./bin/www folder that was created by express command.

YSLOW
=====================

JADE template
==============
No need to close html tags
Use either whitesapce or tab for indentation (Cant mix)
Even if you do not use it, div tag is assumed as the 1st element.
# is for id attribute and . is for class attribute.
Use html2jade for html to jade code conversion. Not all may be converted well. For an example, take care of the varaibles after the conversion.
To include text, just input it after the the tag. Eg: h1 I am good ===>  <h1> I am good</h1>
<input type+"text" placeholder="Username"/> in html ===> input(type="text",placeholder=="UserName")
To access a varaiblename value use =
eg:-- title=name . In this html <title> gets filled with the value from the name varaible.
to inject java scrript use -. (In ejs it was <% %> like in JSP)

When userName is a variable
the following would not work
p.text-center Hello =userName
instead use 
p.text-center Hello 
              =userName
Global scope tip in java script
==============
If you use 
i=10; inside a function, then i is a global varaibale and not limited to that function. Avoid this to ensure the variables are not conflicting.
So use 
var i=10;


Debugging node js applications
===============================
Install nodeclipse. This installation is one where you open an eclipse empty workspace and then drag and drop an image.  Refer http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2566102 for details. This will simulate the Help--> install new software option in eclipse. 

After the installation, create/import project as Node.js Express project. 
Right click on the starting file (not the project directory) and select the 1st option (Node appication). Do not select the second option (Node.js application)
This will start the application on the default debug port of 5858.
After that the debugging, variable expressions are as in the case of Java (Not as user friendly since some of the options that we are used with java debugging may not work here.). To set the breakpoint left click on the  margin (not right click on margin as I am used to in java eclipse debugging).
How to debug video is available at http://www.nodeclipse.org/usage
Good MongoDB material
=======================
https://www.tutorialspoint.com/mongodb/

Mongo DB
===============
Table in RDBMS ==> Collections in Mongo DB.
database ==> database
tuple/row ==> document (this is a json document)
Mongodb is called a document database. 
It is a no fixed schema (means that there are tables do not need specific columns)

Mongo DB Installation and commands
===============
Install mongodb
Add the bin to path
create a folder for data . Use md <folder> for this
start db by  mongod --dbpath <above_folder>

Now to connect use mongo command (This is similar to sqlplus)
show dbs   ---> Shows all databases
use <dbname> -- Goes to that database. It will also create that db.
to shutdown the db server gracefully,	
	use admin  --> So that you are in admin database
	db.shutdownServer()
	exit  --> After the db is shutdown, use this

To see collections (//r to tables in RDBMS), 
	use dbname
	show collections
To see logs
	show log

To create/drop dtabase/collections
	use <dbname> --> This will swich to the db. If not existimg, it will create also.
	dropDatabase() will drop the current database
	db.createCollection('express-templates') --> This creates the express-templates collections
	To display the database when using "show dbs", at least one collection should be created in that database.
	// to drop use the following
	var mydb = db.getCollection('express-templates');
	mydb.drop();  --> db.dbname.collection_name.drop() is an alternate syntax
	// The above will return true if existing

To view all documents(rows) in the collection, do the following
	var mydb = db.getCollection('express-templates');
	mydb.find();
	can also do the following in mongo shell
	db.express-templates.find();
	To beautify the above use db.express-templates.find().pretty();
To view specific documents(rows) in the collection, do the following
	var mydb = db.getCollection('express-templates');
	mydb.find({"runs":6,"batsman":"Sunil Gavaskar"});  -->  This will find  records that has Sunil gavaskar as the batsman and runs=6
Insert, Delete. Update
=====================
var mydb = db.getCollection('cricket');
mydb.insert({'batsman': 'Tendulkar', 'score':6});  ---> db.collection_name.insert({YOUR_JSON}). This will create the collection also if it not pre-existing.
mydb.remove({'score':6}); ---> equivalent syntax is db.collection_name.remove({YOUR_JSON}).
mydb.update({'score':6,'batsman':'Tendulkar'},  {$set:{'score':10}},   {upsert:true,multi:true})  ---> Updates the score to 10P.--> equivalent syntax is db.collection_name.update({YOUR_JSON}).
Update has multiple options. The general synats is 
	db.collection.update(
	   < >,
	   <update>,
	   {
	     upsert: <boolean>,
	     multi: <boolean>,
	     writeConcern: <document>,
	     collation: <document>
	   }
	)
	Read them at 
	https://docs.mongodb.com/manual/reference/method/db.collection.update/

	Details OF update options such as *$SET, $UNSET etc are available at 

	https://docs.mongodb.com/manual/reference/operator/update-field/


MongoDB- Node JS interaction
=============================
(a) by native mongodb library --> Suppossed to be more powerful. npm install mongodb
(b) by mongoose library --npm install mongoose
mongodb://localhost/cricket --> did not connect. Had to use mongodb://127.0.0.1/cricket
npm init is always needed first before doing npm install. Otherwise, the node_modules would not be created.

Hazelcast is the default caching mechanism with WSO2
======================================================

MongoDB namespace
======================
Search for https://docs.mongodb.com/manual/reference/glossary/ to understand what a namespace is

Db--> Collections --> Documents
=====================================

MongoDB query tutorials
==============================
https://docs.mongodb.com/manual/tutorial/query-documents/
What options can be used in find (query) are available at https://mongodb.github.io/node-mongodb-native/api-generated/collection.html#find
Native MongoDB Driver v/s Mongoose driver
===========================================
 MongoDB Driver is more powerful. 
 The advantage of Mongoose is that it is similar to an RDBMS driver. So programmers could be more familiar with it. It has SQL like syntax. Also, mongoose is better suited for fixed coulmns collections. Helps in validating the data. To do al these, we will need to write your own code in natoive mongod db. But it is provided out of the box in MongoDB.
 Mongoose allows you to define a schema (basically your collection structure ie; table definition).

 Mongoose API
 ==============
 The API is available at http://mongoosejs.com/docs/api.html
 It is not well organized. Read it carefully along with sample programs to understand fully well.

GROUP BY SYNTAX in MONGODB
=============================
Find the group by syntax in mongodb at 
http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html



Validation on Insert
=========================
To understand how to do validation on insert, Refer the program mongooseaddrecordwithvalidation.js.
Pay attention to the syntax of the callback function validate and also to the syntax err.errors.runs.message

Adobe Connect - Moxtra selection
==================================

WYSWYG selection
==================
TinyMCE  --> Existing
tkWWW etc
Fond list of wyswyg editors at https://en.wikipedia.org/wiki/List_of_HTML_editors
https://textbox.io/  
Also explored webdav (It uses HTTP PUT)

ETL v/s ESB
==============
ETL ---> Talend, Pentaho. Talend also have esb capabilties.
ESB ------> WSO2. Apache synapse, Apache camel, Apache ServiceMix, MULE
Apache ServiceMix is based on Apache Camel.
WSO2's esb engine is Apache synapse.

Name of our project can not be the same as the modules that we are going to install
=====================================================================================
font-awesome
===================
 http://fontawesome.io/ has has got beautiful font and css

 
 XHR
 ===========
XHR is simple old  XMLHttpRequest on which ajax calls are based on.
XMLHttpRequest (XHR) is an API that can be used by JavaScript, JScript, VBScript, and other web browser scripting languages to transfer and manipulate XML data to and from a webserver using HTTP, establishing an independent connection channel between a webpage's Client-Side and Server-Side

Node JS with rest end points
================================
If we are just using Node JS for rest APIs, then instead of 
response.render("PageName", {json object}); 
do the following
response.json({json object})

Node JS Gaps as compared with the established Java/J2EE web based technolgies
==============================================================================
(a) Connection pooling
(b) How does I18n work ?
(c) Log levels as in log4j/commons logger. Chalk gives only colour coding to the extendt that I am aware of it. It does not provide file based loggers that we would need for debugging production issues. It does not provide log level based logging as far as I am aware of it.

pre method
==================
pre method on let us say save, will call the pre method and only then call the save method.
The syntax for pre method is something like
pre('originalMethodName', function(next) {
	// Based on logic call next() which will call the actual method.
}
This synatx helps a lot in validate methods.


The greatest purpose of package.json is to ensure that the copy of the dependancy libraries are not copied from github to the deployment (heroku) environment. The deployment environment like heroku already has copies of that. However the question that I have is, what happens in case of a version conflict ? is such a version conflict possible at all as the dependacies mentioned in the package.json also.

Unlike import in JAVA, the require in node js should be in the same order as they are called. 
===============================================================================================
Eg:-- If module a is used before module b, then require(module a) should appear earlier than require(module b)
Session, bodyparser, static, template engines(???) are all middlewares in node js concepts.
===============================================================================================
